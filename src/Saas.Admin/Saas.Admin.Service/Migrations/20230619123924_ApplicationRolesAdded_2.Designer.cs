// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Saas.Admin.Service.Data;

#nullable disable

namespace Saas.Admin.Service.Migrations
{
    [DbContext(typeof(TenantsContext))]
    [Migration("20230619123924_ApplicationRolesAdded_2")]
    partial class ApplicationRolesAdded_2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Saas.Admin.Service.Data.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8924f18e-de16-4963-b596-d6ba22dc8d5a"),
                            Name = "Financial services",
                            Url = "financial.topal.ch"
                        },
                        new
                        {
                            Id = new Guid("8bf68f28-11dd-4fff-a88f-38c832812503"),
                            Name = "Payroll services",
                            Url = "payroll.topal.ch"
                        });
                });

            modelBuilder.Entity("Saas.Admin.Service.Data.Entities.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Features", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Technical support"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Custom deployment"
                        });
                });

            modelBuilder.Entity("Saas.Admin.Service.Data.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxUserNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("MonthlyPayment")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Subscriptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationId = new Guid("8924f18e-de16-4963-b596-d6ba22dc8d5a"),
                            MaxUserNumber = 10,
                            MonthlyPayment = 0m,
                            Name = "Trial"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationId = new Guid("8924f18e-de16-4963-b596-d6ba22dc8d5a"),
                            MaxUserNumber = 10,
                            MonthlyPayment = 100m,
                            Name = "Basic"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationId = new Guid("8924f18e-de16-4963-b596-d6ba22dc8d5a"),
                            MaxUserNumber = 100,
                            MonthlyPayment = 1000m,
                            Name = "Standard"
                        },
                        new
                        {
                            Id = 4,
                            ApplicationId = new Guid("8924f18e-de16-4963-b596-d6ba22dc8d5a"),
                            MaxUserNumber = 10000,
                            MonthlyPayment = 10000m,
                            Name = "Premium"
                        },
                        new
                        {
                            Id = 5,
                            ApplicationId = new Guid("8bf68f28-11dd-4fff-a88f-38c832812503"),
                            MaxUserNumber = 10,
                            MonthlyPayment = 0m,
                            Name = "Trial"
                        },
                        new
                        {
                            Id = 6,
                            ApplicationId = new Guid("8bf68f28-11dd-4fff-a88f-38c832812503"),
                            MaxUserNumber = 100,
                            MonthlyPayment = 1000m,
                            Name = "Standard"
                        });
                });

            modelBuilder.Entity("Saas.Admin.Service.Data.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("CreatedTime")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatorEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductTierId")
                        .HasColumnType("int");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Route")
                        .IsUnique();

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Saas.Admin.Service.Data.Entities.TenantApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("TenantId", "ApplicationId", "Role");

                    b.HasIndex("ApplicationId");

                    b.ToTable("TenantApplicationRoles", (string)null);
                });

            modelBuilder.Entity("Saas.Admin.Service.Data.Entities.TenantSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantSubscriptions", (string)null);
                });

            modelBuilder.Entity("Saas.Admin.Service.Data.Entities.TenantUserRole", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApplicationRoleId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "UserId", "ApplicationRoleId");

                    b.HasIndex("ApplicationRoleId", "TenantId");

                    b.ToTable("TenantUserRoles", (string)null);
                });

            modelBuilder.Entity("SubscriptionFeatures", b =>
                {
                    b.Property<int>("FeaturesId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionsId")
                        .HasColumnType("int");

                    b.HasKey("FeaturesId", "SubscriptionsId");

                    b.HasIndex("SubscriptionsId");

                    b.ToTable("SubscriptionFeatures");

                    b.HasData(
                        new
                        {
                            FeaturesId = 1,
                            SubscriptionsId = 3
                        },
                        new
                        {
                            FeaturesId = 1,
                            SubscriptionsId = 4
                        },
                        new
                        {
                            FeaturesId = 2,
                            SubscriptionsId = 4
                        });
                });

            modelBuilder.Entity("Saas.Admin.Service.Data.Entities.Subscription", b =>
                {
                    b.HasOne("Saas.Admin.Service.Data.Entities.Application", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Saas.Admin.Service.Data.Entities.TenantApplicationRole", b =>
                {
                    b.HasOne("Saas.Admin.Service.Data.Entities.Application", null)
                        .WithMany("Roles")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Saas.Admin.Service.Data.Entities.TenantSubscription", b =>
                {
                    b.HasOne("Saas.Admin.Service.Data.Entities.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Saas.Admin.Service.Data.Entities.Tenant", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Saas.Admin.Service.Data.Entities.TenantUserRole", b =>
                {
                    b.HasOne("Saas.Admin.Service.Data.Entities.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Saas.Admin.Service.Data.Entities.TenantApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("ApplicationRoleId", "TenantId")
                        .HasPrincipalKey("Id", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubscriptionFeatures", b =>
                {
                    b.HasOne("Saas.Admin.Service.Data.Entities.Feature", null)
                        .WithMany()
                        .HasForeignKey("FeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Saas.Admin.Service.Data.Entities.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Saas.Admin.Service.Data.Entities.Application", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Saas.Admin.Service.Data.Entities.Tenant", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
